{"version":3,"file":"static/js/596.a510ca1d.chunk.js","mappings":"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","sources":["hooks/useAppDispatch.ts","webpack://gym/./src/components/profileContent/ProfileContent.module.css?f0e3","components/profileContent/ProfileContent.tsx","pages/Profile.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\r\n\r\nimport { AppDispatch } from 'types/redux/redux';\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ProfileContent_wrapper__2S7fH\",\"profile\":\"ProfileContent_profile__cFVoj\",\"profile_content\":\"ProfileContent_profile_content__N6l1u\",\"info\":\"ProfileContent_info__AVQA3\",\"avatarContainer\":\"ProfileContent_avatarContainer__o4hVw\",\"ava\":\"ProfileContent_ava__YjBBo\",\"ava_edit\":\"ProfileContent_ava_edit__yUCAu\",\"plusIcon\":\"ProfileContent_plusIcon__fRyQC\",\"info_content\":\"ProfileContent_info_content__1WkuB\",\"btns\":\"ProfileContent_btns__i6K4j\",\"edit\":\"ProfileContent_edit__ZHl-v\",\"logout\":\"ProfileContent_logout__BSnM9\",\"about\":\"ProfileContent_about__czzpu\",\"text\":\"ProfileContent_text__3kLJ2\",\"btn\":\"ProfileContent_btn__xaALg\",\"input\":\"ProfileContent_input__22-h4\",\"textarea\":\"ProfileContent_textarea__9R4TV\",\"links\":\"ProfileContent_links__hhP15\",\"active\":\"ProfileContent_active__2N19s\"};","import React, { ChangeEvent, FC, useRef } from 'react';\r\nimport { Link, Outlet, useLocation } from 'react-router-dom';\r\n\r\nimport Loading from 'components/common/loading/Loading';\r\n\r\nimport avaIcon from 'assets/icons/ava.png';\r\nimport editIcon from 'assets/icons/edit.png';\r\nimport logoutIcon from 'assets/icons/logout.png';\r\n\r\nimport { IUser } from 'types/user/user';\r\n\r\nimport styles from './ProfileContent.module.css';\r\n\r\ninterface IUserProfileData {\r\n    aim: IUser['aim'];\r\n    aboutText: IUser['aboutText'];\r\n}\r\n\r\ninterface ProfileContentProps {\r\n    username: IUser['username'];\r\n    userProfileData: IUserProfileData;\r\n    isLoading: boolean;\r\n    isEdit: boolean;\r\n    isUploading: boolean;\r\n    avatarUrl: IUser['avatarUrl'];\r\n    userId: string;\r\n    uploadAvatarInStorage: (file: File) => void;\r\n    updateUser: (name: string, value: string) => void;\r\n    toggleEdit: () => void;\r\n    addUserInfoToFirebase: (\r\n        aim: IUser['aim'],\r\n        aboutText: IUser['aboutText'],\r\n        avatarUrl: IUser['avatarUrl']\r\n    ) => void;\r\n    onLogOut: () => void;\r\n}\r\n\r\nconst ProfileContent: FC<ProfileContentProps> = ({\r\n    userId,\r\n    username,\r\n    isLoading,\r\n    userProfileData,\r\n    isEdit,\r\n    avatarUrl,\r\n    isUploading,\r\n    uploadAvatarInStorage,\r\n    updateUser,\r\n    toggleEdit,\r\n    addUserInfoToFirebase,\r\n    onLogOut,\r\n}) => {\r\n    const { pathname } = useLocation();\r\n    const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n    const handleChange = (\r\n        e:\r\n            | React.ChangeEvent<HTMLInputElement>\r\n            | React.ChangeEvent<HTMLTextAreaElement>\r\n    ) => {\r\n        const { name, value } = e.target;\r\n        updateUser(name, value);\r\n    };\r\n\r\n    const onSaveEdit = () => {\r\n        toggleEdit();\r\n        addUserInfoToFirebase(\r\n            userProfileData.aim,\r\n            userProfileData.aboutText,\r\n            avatarUrl\r\n        );\r\n    };\r\n\r\n    const handleChangeFile = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files?.[0];\r\n        if (file) {\r\n            uploadAvatarInStorage(file);\r\n        }\r\n    };\r\n\r\n    const handleClickInput = () => isEdit && inputRef.current?.click();\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className=\"container\">\r\n                <div className={styles.profile}>\r\n                    <div className={styles.info}>\r\n                        <div className={styles.info_content}>\r\n                            <div\r\n                                className={styles.avatarContainer}\r\n                                onClick={handleClickInput}\r\n                            >\r\n                                {isLoading || isUploading ? (\r\n                                    <Loading />\r\n                                ) : (\r\n                                    <>\r\n                                        <img\r\n                                            className={\r\n                                                isEdit\r\n                                                    ? styles.ava +\r\n                                                      ' ' +\r\n                                                      styles.ava_edit\r\n                                                    : styles.ava\r\n                                            }\r\n                                            src={\r\n                                                avatarUrl ? avatarUrl : avaIcon\r\n                                            }\r\n                                            alt=\"avatar\"\r\n                                        />\r\n                                        {isEdit && (\r\n                                            <div\r\n                                                className={styles.plusIcon}\r\n                                            ></div>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n                            <input\r\n                                ref={inputRef}\r\n                                onChange={handleChangeFile}\r\n                                type=\"file\"\r\n                                hidden\r\n                            />\r\n                            {isEdit ? (\r\n                                <div className={styles.about}>\r\n                                    <h1>\r\n                                        {username\r\n                                            .split(' ')\r\n                                            .map((item, index) => (\r\n                                                <div key={index}>\r\n                                                    <span>\r\n                                                        {item.charAt(0)}\r\n                                                    </span>\r\n                                                    {item.slice(1)}\r\n                                                </div>\r\n                                            ))}\r\n                                    </h1>\r\n                                    <input\r\n                                        className={styles.input}\r\n                                        value={userProfileData.aim}\r\n                                        onChange={handleChange}\r\n                                        name=\"aim\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"Введите свою цель\"\r\n                                    />\r\n                                </div>\r\n                            ) : (\r\n                                <div className={styles.about}>\r\n                                    <h1>\r\n                                        {username\r\n                                            .split(' ')\r\n                                            .map((item, index) => (\r\n                                                <div key={index}>\r\n                                                    <span>\r\n                                                        {item.charAt(0)}\r\n                                                    </span>\r\n                                                    {item.slice(1)}\r\n                                                </div>\r\n                                            ))}\r\n                                    </h1>\r\n                                    {isLoading ? (\r\n                                        <Loading />\r\n                                    ) : (\r\n                                        <p>\r\n                                            {userProfileData.aim\r\n                                                ? userProfileData.aim\r\n                                                : 'Цель еще не была добавлена'}\r\n                                        </p>\r\n                                    )}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        {!isEdit && (\r\n                            <div className={styles.btns}>\r\n                                <button\r\n                                    onClick={toggleEdit}\r\n                                    className={styles.edit}\r\n                                >\r\n                                    <img src={editIcon} alt=\"edit\" />\r\n                                </button>\r\n                                <button\r\n                                    onClick={onLogOut}\r\n                                    className={styles.logout}\r\n                                >\r\n                                    Выйти\r\n                                    <img src={logoutIcon} alt=\"logout\" />\r\n                                </button>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <div className={styles.profile_content}>\r\n                        <div className={styles.text}>\r\n                            <h2>О себе</h2>\r\n                            {isEdit ? (\r\n                                <textarea\r\n                                    className={styles.textarea}\r\n                                    value={userProfileData.aboutText}\r\n                                    name=\"aboutText\"\r\n                                    onChange={handleChange}\r\n                                    placeholder=\"Напишите о себе и о своих достижениях\"\r\n                                ></textarea>\r\n                            ) : isLoading ? (\r\n                                <Loading />\r\n                            ) : (\r\n                                <p>\r\n                                    {userProfileData.aboutText\r\n                                        ? userProfileData.aboutText\r\n                                        : 'Нет информации о себе'}\r\n                                </p>\r\n                            )}\r\n                            {isEdit && (\r\n                                <button\r\n                                    className={styles.btn}\r\n                                    onClick={onSaveEdit}\r\n                                >\r\n                                    Применить изменения\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                        <div className={styles.links}>\r\n                            <Link\r\n                                className={\r\n                                    pathname === `/profile/${userId}`\r\n                                        ? styles.active\r\n                                        : ''\r\n                                }\r\n                                to={''}\r\n                            >\r\n                                Тренировки\r\n                            </Link>\r\n                            <Link\r\n                                className={\r\n                                    pathname === `/profile/${userId}/articles`\r\n                                        ? styles.active\r\n                                        : ''\r\n                                }\r\n                                to=\"articles\"\r\n                            >\r\n                                Статьи\r\n                            </Link>\r\n                        </div>\r\n                        <Outlet />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileContent;\r\n","import { FC, useEffect, useState } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport {\r\n    collection,\r\n    doc,\r\n    getDoc,\r\n    getDocs,\r\n    getFirestore,\r\n    query,\r\n    setDoc,\r\n    updateDoc,\r\n    where,\r\n    writeBatch,\r\n} from 'firebase/firestore';\r\nimport {\r\n    getDownloadURL,\r\n    getStorage,\r\n    ref,\r\n    uploadBytesResumable,\r\n} from 'firebase/storage';\r\n\r\nimport ProfileContent from 'components/profileContent/ProfileContent';\r\n\r\nimport { useAuth } from 'hooks/useAuth';\r\nimport { useAppDispatch } from 'hooks/useAppDispatch';\r\nimport { IUser } from 'types/user/user';\r\n\r\nimport { removeUser, setUser } from '../redux/ProfileSlice';\r\n\r\ninterface IUserInfo {\r\n    aim: IUser['aim'];\r\n    aboutText: IUser['aboutText'];\r\n}\r\n\r\nconst Profile: FC = () => {\r\n    const db = getFirestore();\r\n    const storage = getStorage();\r\n    const dispatch = useAppDispatch();\r\n\r\n    const user = useAuth();\r\n    const { isAuth, username, id } = user;\r\n\r\n    const [userInfo, setUserInfo] = useState<IUserInfo>({\r\n        aim: '',\r\n        aboutText: '',\r\n    });\r\n    const [avatarUrl, setAvatarUrl] = useState<IUser['avatarUrl']>('');\r\n\r\n    const [isEdit, setIsEdit] = useState<boolean>(false);\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [isUploading, setIsUploading] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        const getUserInfoFromFirebase = async () => {\r\n            if (id && !isEdit) {\r\n                try {\r\n                    setIsLoading(true);\r\n                    const userRef = doc(db, 'users', `${id}`);\r\n                    const docSnapshot = await getDoc(userRef);\r\n                    if (docSnapshot.exists()) {\r\n                        const userData = docSnapshot.data();\r\n                        const { aim, aboutText, avatarUrl } = userData;\r\n                        setUserInfo({ aim, aboutText });\r\n                        setAvatarUrl(avatarUrl);\r\n                    }\r\n                } finally {\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n        };\r\n\r\n        getUserInfoFromFirebase();\r\n    }, [id, isEdit, db]);\r\n\r\n    const uploadAvatarInStorage = (file: File) => {\r\n        try {\r\n            const storageRef = ref(storage, `users/avatars/${id}/${file.name}`);\r\n            const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n            uploadTask.on(\r\n                'state_changed',\r\n                (snapshot) => {\r\n                    setIsUploading(true);\r\n                },\r\n                (error) => {\r\n                    setIsUploading(false);\r\n                },\r\n                async () => {\r\n                    const downloadURL = await getDownloadURL(\r\n                        uploadTask.snapshot.ref\r\n                    );\r\n                    setAvatarUrl(downloadURL);\r\n                    setIsUploading(false);\r\n                }\r\n            );\r\n        } finally {\r\n            setIsUploading(false);\r\n        }\r\n    };\r\n\r\n    const updateUserInfo = (name: string, value: string) => {\r\n        setUserInfo((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const toggleEdit = () => {\r\n        setIsEdit(!isEdit);\r\n    };\r\n\r\n    const addUserInfoToFirebase = async (\r\n        aim: IUser['aim'],\r\n        aboutText: IUser['aboutText'],\r\n        avatarUrl: IUser['avatarUrl']\r\n    ) => {\r\n        try {\r\n            setIsLoading(true);\r\n            if (id) {\r\n                const userRef = doc(db, 'users', `${id}`);\r\n                if (userInfo.aim) {\r\n                    await updateDoc(userRef, {\r\n                        aim,\r\n                        aboutText,\r\n                        avatarUrl,\r\n                    });\r\n\r\n                    const q = query(\r\n                        collection(db, 'articles'),\r\n                        where('user.username', '==', username)\r\n                    );\r\n                    const querySnapshot = await getDocs(q);\r\n\r\n                    // Обновляем поле avatarUrl в каждой статье\r\n                    const batch = writeBatch(db);\r\n                    querySnapshot.forEach((articleDoc) => {\r\n                        const articleRef = doc(db, 'articles', articleDoc.id);\r\n                        batch.update(articleRef, {\r\n                            user: {\r\n                                username,\r\n                                avatarUrl,\r\n                            },\r\n                        });\r\n                    });\r\n                    await batch.commit();\r\n                } else {\r\n                    await setDoc(userRef, {\r\n                        aim,\r\n                        aboutText,\r\n                        avatarUrl,\r\n                    });\r\n                }\r\n                dispatch(\r\n                    setUser({\r\n                        ...user,\r\n                        avatarUrl,\r\n                    })\r\n                );\r\n            }\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const onLogOut = () => {\r\n        setUserInfo({\r\n            aboutText: '',\r\n            aim: '',\r\n        });\r\n        setAvatarUrl('');\r\n        dispatch(removeUser());\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isAuth ? (\r\n                <ProfileContent\r\n                    userId={id}\r\n                    username={username}\r\n                    avatarUrl={avatarUrl}\r\n                    userProfileData={userInfo}\r\n                    isLoading={isLoading}\r\n                    isEdit={isEdit}\r\n                    isUploading={isUploading}\r\n                    onLogOut={onLogOut}\r\n                    uploadAvatarInStorage={uploadAvatarInStorage}\r\n                    updateUser={updateUserInfo}\r\n                    toggleEdit={toggleEdit}\r\n                    addUserInfoToFirebase={addUserInfoToFirebase}\r\n                />\r\n            ) : (\r\n                <Navigate replace to={'/signin'} />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n"],"names":["useAppDispatch","useDispatch","_ref","userId","username","isLoading","userProfileData","isEdit","avatarUrl","isUploading","uploadAvatarInStorage","updateUser","toggleEdit","addUserInfoToFirebase","onLogOut","pathname","useLocation","inputRef","useRef","handleChange","e","name","value","target","_jsx","className","styles","children","_jsxs","onClick","handleClickInput","_inputRef$current","current","click","Loading","_Fragment","src","avaIcon","alt","ref","onChange","_e$target$files","file","files","type","hidden","split","map","item","index","charAt","slice","aim","placeholder","aboutText","onSaveEdit","Link","concat","to","Outlet","Profile","db","getFirestore","storage","getStorage","dispatch","user","useAuth","isAuth","id","userInfo","setUserInfo","useState","setAvatarUrl","setIsEdit","setIsLoading","setIsUploading","useEffect","async","userRef","doc","docSnapshot","getDoc","exists","userData","data","getUserInfoFromFirebase","ProfileContent","removeUser","storageRef","uploadTask","uploadBytesResumable","on","snapshot","error","downloadURL","getDownloadURL","updateUserInfo","prev","updateDoc","q","query","collection","where","querySnapshot","getDocs","batch","writeBatch","forEach","articleDoc","articleRef","update","commit","setDoc","setUser","Navigate","replace"],"sourceRoot":""}