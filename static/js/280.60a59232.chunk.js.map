{"version":3,"file":"static/js/280.60a59232.chunk.js","mappings":"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","sources":["hooks/useAppDispatch.ts","webpack://gym/./src/components/signInContent/SignInContent.module.css?cbef","components/signInContent/SignInContent.tsx","pages/SignIn.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\r\n\r\nimport { AppDispatch } from 'types/redux/redux';\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"signin_wrapper\":\"SignInContent_signin_wrapper__835t6\",\"signin_content\":\"SignInContent_signin_content__mO+wL\",\"google\":\"SignInContent_google__9Zlv2\"};","import { FC, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { IUser } from 'types/user/user';\r\n\r\nimport googleIcon from 'assets/icons/google.png';\r\n\r\nimport styles from './SignInContent.module.css';\r\n\r\ninterface SignInContentProps {\r\n    errorMessage: string;\r\n    onGoogleSignIn: () => void;\r\n    onSignIn: (email: IUser['email'], password: string) => void;\r\n}\r\n\r\ninterface ISignInFormData {\r\n    email: IUser['email'];\r\n    password: string;\r\n}\r\n\r\nconst SignInContent: FC<SignInContentProps> = ({\r\n    errorMessage,\r\n    onSignIn,\r\n    onGoogleSignIn,\r\n}) => {\r\n    const [formData, setFormData] = useState<ISignInFormData>({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n        setFormData((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: value,\r\n        }));\r\n    };\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        const { email, password } = formData;\r\n        onSignIn(email, password);\r\n    };\r\n    return (\r\n        <div className={styles.signin_wrapper}>\r\n            <div className={styles.signin_content}>\r\n                <h1>Welcome Back!</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        value={formData.email}\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        placeholder=\"Введите свой email\"\r\n                        onChange={handleChange}\r\n                    />\r\n                    <input\r\n                        value={formData.password}\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Введите пароль\"\r\n                        onChange={handleChange}\r\n                    />\r\n                    <button type=\"submit\">Войти</button>\r\n                </form>\r\n                <button className={styles.google} onClick={onGoogleSignIn}>\r\n                    <img src={googleIcon} alt=\"google\" />\r\n                    Войти с помощью Google\r\n                </button>\r\n                <p>\r\n                    Нет аккаунта? <Link to=\"/signup\">Создайте его здесь</Link>\r\n                </p>\r\n                {errorMessage && <p>{errorMessage}</p>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignInContent;\r\n","import { FC, useState } from 'react';\r\nimport { Navigate, useNavigate } from 'react-router-dom';\r\nimport {\r\n    GoogleAuthProvider,\r\n    getAuth,\r\n    signInWithEmailAndPassword,\r\n    signInWithPopup,\r\n} from 'firebase/auth';\r\nimport { doc, getDoc, getFirestore } from 'firebase/firestore';\r\n\r\nimport Loading from 'components/common/loading/Loading';\r\nimport SignInContent from 'components/signInContent/SignInContent';\r\n\r\nimport { useAuth } from 'hooks/useAuth';\r\nimport { useAppDispatch } from 'hooks/useAppDispatch';\r\nimport { IUser } from 'types/user/user';\r\n\r\nimport { setUser } from '../redux/ProfileSlice';\r\n\r\nconst SignIn: FC = () => {\r\n    const auth = getAuth();\r\n    const db = getFirestore();\r\n    const { isAuth, id } = useAuth();\r\n    const navigate = useNavigate();\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [errorMessage, setErrorMessage] = useState<string>('');\r\n\r\n    const onSignIn = async (email: IUser['email'], password: string) => {\r\n        try {\r\n            setLoading(true);\r\n\r\n            const { user } = await signInWithEmailAndPassword(\r\n                auth,\r\n                email,\r\n                password\r\n            );\r\n\r\n            const userRef = doc(db, 'users', `${user.uid}`);\r\n            const docSnapshot = await getDoc(userRef);\r\n\r\n            const userInfo = {\r\n                email: user.email,\r\n                token: user.refreshToken,\r\n                id: user.uid,\r\n                username: user.displayName,\r\n            };\r\n\r\n            if (docSnapshot.exists()) {\r\n                const userData = docSnapshot.data();\r\n                const { avatarUrl } = userData as IUser;\r\n\r\n                dispatch(\r\n                    setUser({\r\n                        ...userInfo,\r\n                        avatarUrl: avatarUrl,\r\n                    })\r\n                );\r\n            } else {\r\n                dispatch(setUser(userInfo));\r\n            }\r\n            navigate(`/profile/${user.uid}`);\r\n        } catch (error: any) {\r\n            if (error instanceof Error) {\r\n                setErrorMessage(error.message);\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const onGoogleSignIn = async () => {\r\n        try {\r\n            const provider = new GoogleAuthProvider();\r\n            const { user } = await signInWithPopup(auth, provider);\r\n\r\n            const userRef = doc(db, 'users', `${user.uid}`);\r\n            const docSnapshot = await getDoc(userRef);\r\n\r\n            if (docSnapshot.exists()) {\r\n                const userData = docSnapshot.data();\r\n                const { avatarUrl } = userData as IUser;\r\n\r\n                dispatch(\r\n                    setUser({\r\n                        email: user.email,\r\n                        username: user.displayName,\r\n                        id: user.uid,\r\n                        token: user.refreshToken,\r\n                        avatarUrl: avatarUrl,\r\n                    })\r\n                );\r\n            }\r\n        } catch (error: any) {\r\n            if (error instanceof Error) {\r\n                setErrorMessage(error.message);\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {loading ? (\r\n                <Loading />\r\n            ) : isAuth ? (\r\n                <Navigate replace to={`/profile/${id}`} />\r\n            ) : (\r\n                <SignInContent\r\n                    onGoogleSignIn={onGoogleSignIn}\r\n                    errorMessage={errorMessage}\r\n                    onSignIn={onSignIn}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignIn;\r\n"],"names":["useAppDispatch","useDispatch","_ref","errorMessage","onSignIn","onGoogleSignIn","formData","setFormData","useState","email","password","handleChange","e","name","value","target","prevFormData","_jsx","className","styles","children","_jsxs","onSubmit","preventDefault","type","placeholder","onChange","onClick","src","alt","Link","to","SignIn","auth","getAuth","db","getFirestore","isAuth","id","useAuth","navigate","useNavigate","dispatch","loading","setLoading","setErrorMessage","Loading","Navigate","replace","concat","SignInContent","async","provider","GoogleAuthProvider","user","signInWithPopup","userRef","doc","uid","docSnapshot","getDoc","exists","userData","data","avatarUrl","setUser","username","displayName","token","refreshToken","error","Error","message","signInWithEmailAndPassword","userInfo"],"sourceRoot":""}