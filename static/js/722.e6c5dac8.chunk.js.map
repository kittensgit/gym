{"version":3,"file":"static/js/722.e6c5dac8.chunk.js","mappings":"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","sources":["../node_modules/date-fns/_lib/defaultOptions.mjs","../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs","../node_modules/date-fns/constants.mjs","../node_modules/date-fns/startOfDay.mjs","../node_modules/date-fns/differenceInCalendarDays.mjs","../node_modules/date-fns/constructFrom.mjs","../node_modules/date-fns/startOfYear.mjs","../node_modules/date-fns/getDayOfYear.mjs","../node_modules/date-fns/startOfISOWeek.mjs","../node_modules/date-fns/getISOWeekYear.mjs","../node_modules/date-fns/startOfISOWeekYear.mjs","../node_modules/date-fns/getISOWeek.mjs","../node_modules/date-fns/getWeekYear.mjs","../node_modules/date-fns/startOfWeekYear.mjs","../node_modules/date-fns/getWeek.mjs","../node_modules/date-fns/_lib/addLeadingZeros.mjs","../node_modules/date-fns/_lib/format/lightFormatters.mjs","../node_modules/date-fns/_lib/format/formatters.mjs","../node_modules/date-fns/_lib/format/longFormatters.mjs","../node_modules/date-fns/_lib/protectedTokens.mjs","../node_modules/date-fns/isDate.mjs","../node_modules/date-fns/isValid.mjs","../node_modules/date-fns/format.mjs","../node_modules/date-fns/compareAsc.mjs","../node_modules/date-fns/formatDistanceStrict.mjs","../node_modules/date-fns/_lib/getRoundingMethod.mjs","../node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs","../node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs","../node_modules/date-fns/locale/_lib/buildMatchFn.mjs","../node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs","../node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs","../node_modules/date-fns/locale/en-US/_lib/formatLong.mjs","../node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs","../node_modules/date-fns/locale/en-US/_lib/localize.mjs","../node_modules/date-fns/locale/en-US/_lib/match.mjs","../node_modules/date-fns/locale/en-US.mjs","../node_modules/date-fns/locale/ru/_lib/formatDistance.mjs","../node_modules/date-fns/locale/ru/_lib/formatLong.mjs","../node_modules/date-fns/isSameWeek.mjs","../node_modules/date-fns/locale/ru/_lib/formatRelative.mjs","../node_modules/date-fns/locale/ru/_lib/localize.mjs","../node_modules/date-fns/locale/ru/_lib/match.mjs","../node_modules/date-fns/locale/ru.mjs","../node_modules/date-fns/startOfWeek.mjs","../node_modules/date-fns/toDate.mjs"],"sourcesContent":["let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { toDate } from \"../toDate.mjs\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { millisecondsInDay } from \"./constants.mjs\";\nimport { startOfDay } from \"./startOfDay.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = startOfDay(dateLeft);\n  const startOfDayRight = startOfDay(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date) {\n  const cleanDate = toDate(date);\n  const _date = constructFrom(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { startOfYear } from \"./startOfYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date) {\n  const _date = toDate(date);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date) {\n  return startOfWeek(date, { weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { getISOWeekYear } from \"./getISOWeekYear.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date) {\n  const year = getISOWeekYear(date);\n  const fourthOfJanuary = constructFrom(date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date) {\n  const _date = toDate(date);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getWeekYear } from \"./getWeekYear.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport function getWeek(date, options) {\n  const _date = toDate(date);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.mjs\";\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\nimport { getWeek } from \"../../getWeek.mjs\";\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\nimport { lightFormatters } from \"./lightFormatters.mjs\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(date.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    const timestamp = date.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { formatters } from \"./_lib/format/formatters.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport function compareAsc(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const diff = _dateLeft.getTime() - _dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n\n// Fallback for modularized imports:\nexport default compareAsc;\n","import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { compareAsc } from \"./compareAsc.mjs\";\nimport {\n  millisecondsInMinute,\n  minutesInDay,\n  minutesInMonth,\n  minutesInYear,\n} from \"./constants.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link formatDistanceStrict} function options.\n */\n\n/**\n * The unit used to format the distance in {@link formatDistanceStrict}.\n */\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport function formatDistanceStrict(date, baseDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const comparison = compareAsc(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = toDate(baseDate);\n    dateRight = toDate(date);\n  } else {\n    dateLeft = toDate(date);\n    dateRight = toDate(baseDate);\n  }\n\n  const roundingMethod = getRoundingMethod(options?.roundingMethod ?? \"round\");\n\n  const milliseconds = dateRight.getTime() - dateLeft.getTime();\n  const minutes = milliseconds / millisecondsInMinute;\n\n  const timezoneOffset =\n    getTimezoneOffsetInMilliseconds(dateRight) -\n    getTimezoneOffsetInMilliseconds(dateLeft);\n\n  // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n  const dstNormalizedMinutes =\n    (milliseconds - timezoneOffset) / millisecondsInMinute;\n\n  const defaultUnit = options?.unit;\n  let unit;\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = \"second\";\n    } else if (minutes < 60) {\n      unit = \"minute\";\n    } else if (minutes < minutesInDay) {\n      unit = \"hour\";\n    } else if (dstNormalizedMinutes < minutesInMonth) {\n      unit = \"day\";\n    } else if (dstNormalizedMinutes < minutesInYear) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n  } else {\n    unit = defaultUnit;\n  }\n\n  // 0 up to 60 seconds\n  if (unit === \"second\") {\n    const seconds = roundingMethod(milliseconds / 1000);\n    return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\n\n    // 1 up to 60 mins\n  } else if (unit === \"minute\") {\n    const roundedMinutes = roundingMethod(minutes);\n    return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\n\n    // 1 up to 24 hours\n  } else if (unit === \"hour\") {\n    const hours = roundingMethod(minutes / 60);\n    return locale.formatDistance(\"xHours\", hours, localizeOptions);\n\n    // 1 up to 30 days\n  } else if (unit === \"day\") {\n    const days = roundingMethod(dstNormalizedMinutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 up to 12 months\n  } else if (unit === \"month\") {\n    const months = roundingMethod(dstNormalizedMinutes / minutesInMonth);\n    return months === 12 && defaultUnit !== \"month\"\n      ? locale.formatDistance(\"xYears\", 1, localizeOptions)\n      : locale.formatDistance(\"xMonths\", months, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const years = roundingMethod(dstNormalizedMinutes / minutesInYear);\n    return locale.formatDistance(\"xYears\", years, localizeOptions);\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceStrict;\n","export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\nimport { localize } from \"./en-US/_lib/localize.mjs\";\nimport { match } from \"./en-US/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","function declension(scheme, count) {\n  // scheme for count=1 exists\n  if (scheme.one !== undefined && count === 1) {\n    return scheme.one;\n  }\n\n  const rem10 = count % 10;\n  const rem100 = count % 100;\n\n  // 1, 21, 31, ...\n  if (rem10 === 1 && rem100 !== 11) {\n    return scheme.singularNominative.replace(\"{{count}}\", String(count));\n\n    // 2, 3, 4, 22, 23, 24, 32 ...\n  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {\n    return scheme.singularGenitive.replace(\"{{count}}\", String(count));\n\n    // 5, 6, 7, 8, 9, 10, 11, ...\n  } else {\n    return scheme.pluralGenitive.replace(\"{{count}}\", String(count));\n  }\n}\n\nfunction buildLocalizeTokenFn(scheme) {\n  return (count, options) => {\n    if (options?.addSuffix) {\n      if (options.comparison && options.comparison > 0) {\n        if (scheme.future) {\n          return declension(scheme.future, count);\n        } else {\n          return \"через \" + declension(scheme.regular, count);\n        }\n      } else {\n        if (scheme.past) {\n          return declension(scheme.past, count);\n        } else {\n          return declension(scheme.regular, count) + \" назад\";\n        }\n      }\n    } else {\n      return declension(scheme.regular, count);\n    }\n  };\n}\n\nconst formatDistanceLocale = {\n  lessThanXSeconds: buildLocalizeTokenFn({\n    regular: {\n      one: \"меньше секунды\",\n      singularNominative: \"меньше {{count}} секунды\",\n      singularGenitive: \"меньше {{count}} секунд\",\n      pluralGenitive: \"меньше {{count}} секунд\",\n    },\n    future: {\n      one: \"меньше, чем через секунду\",\n      singularNominative: \"меньше, чем через {{count}} секунду\",\n      singularGenitive: \"меньше, чем через {{count}} секунды\",\n      pluralGenitive: \"меньше, чем через {{count}} секунд\",\n    },\n  }),\n\n  xSeconds: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} секунда\",\n      singularGenitive: \"{{count}} секунды\",\n      pluralGenitive: \"{{count}} секунд\",\n    },\n    past: {\n      singularNominative: \"{{count}} секунду назад\",\n      singularGenitive: \"{{count}} секунды назад\",\n      pluralGenitive: \"{{count}} секунд назад\",\n    },\n    future: {\n      singularNominative: \"через {{count}} секунду\",\n      singularGenitive: \"через {{count}} секунды\",\n      pluralGenitive: \"через {{count}} секунд\",\n    },\n  }),\n\n  halfAMinute: (_count, options) => {\n    if (options?.addSuffix) {\n      if (options.comparison && options.comparison > 0) {\n        return \"через полминуты\";\n      } else {\n        return \"полминуты назад\";\n      }\n    }\n\n    return \"полминуты\";\n  },\n\n  lessThanXMinutes: buildLocalizeTokenFn({\n    regular: {\n      one: \"меньше минуты\",\n      singularNominative: \"меньше {{count}} минуты\",\n      singularGenitive: \"меньше {{count}} минут\",\n      pluralGenitive: \"меньше {{count}} минут\",\n    },\n    future: {\n      one: \"меньше, чем через минуту\",\n      singularNominative: \"меньше, чем через {{count}} минуту\",\n      singularGenitive: \"меньше, чем через {{count}} минуты\",\n      pluralGenitive: \"меньше, чем через {{count}} минут\",\n    },\n  }),\n\n  xMinutes: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} минута\",\n      singularGenitive: \"{{count}} минуты\",\n      pluralGenitive: \"{{count}} минут\",\n    },\n    past: {\n      singularNominative: \"{{count}} минуту назад\",\n      singularGenitive: \"{{count}} минуты назад\",\n      pluralGenitive: \"{{count}} минут назад\",\n    },\n    future: {\n      singularNominative: \"через {{count}} минуту\",\n      singularGenitive: \"через {{count}} минуты\",\n      pluralGenitive: \"через {{count}} минут\",\n    },\n  }),\n\n  aboutXHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"около {{count}} часа\",\n      singularGenitive: \"около {{count}} часов\",\n      pluralGenitive: \"около {{count}} часов\",\n    },\n    future: {\n      singularNominative: \"приблизительно через {{count}} час\",\n      singularGenitive: \"приблизительно через {{count}} часа\",\n      pluralGenitive: \"приблизительно через {{count}} часов\",\n    },\n  }),\n\n  xHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} час\",\n      singularGenitive: \"{{count}} часа\",\n      pluralGenitive: \"{{count}} часов\",\n    },\n  }),\n\n  xDays: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} день\",\n      singularGenitive: \"{{count}} дня\",\n      pluralGenitive: \"{{count}} дней\",\n    },\n  }),\n\n  aboutXWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"около {{count}} недели\",\n      singularGenitive: \"около {{count}} недель\",\n      pluralGenitive: \"около {{count}} недель\",\n    },\n    future: {\n      singularNominative: \"приблизительно через {{count}} неделю\",\n      singularGenitive: \"приблизительно через {{count}} недели\",\n      pluralGenitive: \"приблизительно через {{count}} недель\",\n    },\n  }),\n\n  xWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} неделя\",\n      singularGenitive: \"{{count}} недели\",\n      pluralGenitive: \"{{count}} недель\",\n    },\n  }),\n\n  aboutXMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"около {{count}} месяца\",\n      singularGenitive: \"около {{count}} месяцев\",\n      pluralGenitive: \"около {{count}} месяцев\",\n    },\n    future: {\n      singularNominative: \"приблизительно через {{count}} месяц\",\n      singularGenitive: \"приблизительно через {{count}} месяца\",\n      pluralGenitive: \"приблизительно через {{count}} месяцев\",\n    },\n  }),\n\n  xMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} месяц\",\n      singularGenitive: \"{{count}} месяца\",\n      pluralGenitive: \"{{count}} месяцев\",\n    },\n  }),\n\n  aboutXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"около {{count}} года\",\n      singularGenitive: \"около {{count}} лет\",\n      pluralGenitive: \"около {{count}} лет\",\n    },\n    future: {\n      singularNominative: \"приблизительно через {{count}} год\",\n      singularGenitive: \"приблизительно через {{count}} года\",\n      pluralGenitive: \"приблизительно через {{count}} лет\",\n    },\n  }),\n\n  xYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} год\",\n      singularGenitive: \"{{count}} года\",\n      pluralGenitive: \"{{count}} лет\",\n    },\n  }),\n\n  overXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"больше {{count}} года\",\n      singularGenitive: \"больше {{count}} лет\",\n      pluralGenitive: \"больше {{count}} лет\",\n    },\n    future: {\n      singularNominative: \"больше, чем через {{count}} год\",\n      singularGenitive: \"больше, чем через {{count}} года\",\n      pluralGenitive: \"больше, чем через {{count}} лет\",\n    },\n  }),\n\n  almostXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"почти {{count}} год\",\n      singularGenitive: \"почти {{count}} года\",\n      pluralGenitive: \"почти {{count}} лет\",\n    },\n    future: {\n      singularNominative: \"почти через {{count}} год\",\n      singularGenitive: \"почти через {{count}} года\",\n      pluralGenitive: \"почти через {{count}} лет\",\n    },\n  }),\n};\n\nexport const formatDistance = (token, count, options) => {\n  return formatDistanceLocale[token](count, options);\n};\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, d MMMM y 'г.'\",\n  long: \"d MMMM y 'г.'\",\n  medium: \"d MMM y 'г.'\",\n  short: \"dd.MM.y\",\n};\n\nconst timeFormats = {\n  full: \"H:mm:ss zzzz\",\n  long: \"H:mm:ss z\",\n  medium: \"H:mm:ss\",\n  short: \"H:mm\",\n};\n\nconst dateTimeFormats = {\n  any: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"any\",\n  }),\n};\n","import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * The {@link isSameWeek} function options.\n */\n\n/**\n * @name isSameWeek\n * @category Week Helpers\n * @summary Are the given dates in the same week (and month and year)?\n *\n * @description\n * Are the given dates in the same week (and month and year)?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to check\n * @param dateRight - The second date to check\n * @param options - An object with options\n *\n * @returns The dates are in the same week (and month and year)\n *\n * @example\n * // Are 31 August 2014 and 4 September 2014 in the same week?\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\n * //=> true\n *\n * @example\n * // If week starts with Monday,\n * // are 31 August 2014 and 4 September 2014 in the same week?\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\n *   weekStartsOn: 1\n * })\n * //=> false\n *\n * @example\n * // Are 1 January 2014 and 1 January 2015 in the same week?\n * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))\n * //=> false\n */\nexport function isSameWeek(dateLeft, dateRight, options) {\n  const dateLeftStartOfWeek = startOfWeek(dateLeft, options);\n  const dateRightStartOfWeek = startOfWeek(dateRight, options);\n\n  return +dateLeftStartOfWeek === +dateRightStartOfWeek;\n}\n\n// Fallback for modularized imports:\nexport default isSameWeek;\n","import { isSameWeek } from \"../../../isSameWeek.mjs\";\n\nconst accusativeWeekdays = [\n  \"воскресенье\",\n  \"понедельник\",\n  \"вторник\",\n  \"среду\",\n  \"четверг\",\n  \"пятницу\",\n  \"субботу\",\n];\n\nfunction lastWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  switch (day) {\n    case 0:\n      return \"'в прошлое \" + weekday + \" в' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'в прошлый \" + weekday + \" в' p\";\n    case 3:\n    case 5:\n    case 6:\n      return \"'в прошлую \" + weekday + \" в' p\";\n  }\n}\n\nfunction thisWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  if (day === 2 /* Tue */) {\n    return \"'во \" + weekday + \" в' p\";\n  } else {\n    return \"'в \" + weekday + \" в' p\";\n  }\n}\n\nfunction nextWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  switch (day) {\n    case 0:\n      return \"'в следующее \" + weekday + \" в' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'в следующий \" + weekday + \" в' p\";\n    case 3:\n    case 5:\n    case 6:\n      return \"'в следующую \" + weekday + \" в' p\";\n  }\n}\n\nconst formatRelativeLocale = {\n  lastWeek: (date, baseDate, options) => {\n    const day = date.getDay();\n    if (isSameWeek(date, baseDate, options)) {\n      return thisWeek(day);\n    } else {\n      return lastWeek(day);\n    }\n  },\n  yesterday: \"'вчера в' p\",\n  today: \"'сегодня в' p\",\n  tomorrow: \"'завтра в' p\",\n  nextWeek: (date, baseDate, options) => {\n    const day = date.getDay();\n    if (isSameWeek(date, baseDate, options)) {\n      return thisWeek(day);\n    } else {\n      return nextWeek(day);\n    }\n  },\n  other: \"P\",\n};\n\nexport const formatRelative = (token, date, baseDate, options) => {\n  const format = formatRelativeLocale[token];\n\n  if (typeof format === \"function\") {\n    return format(date, baseDate, options);\n  }\n\n  return format;\n};\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"до н.э.\", \"н.э.\"],\n  abbreviated: [\"до н. э.\", \"н. э.\"],\n  wide: [\"до нашей эры\", \"нашей эры\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"1-й кв.\", \"2-й кв.\", \"3-й кв.\", \"4-й кв.\"],\n  wide: [\"1-й квартал\", \"2-й квартал\", \"3-й квартал\", \"4-й квартал\"],\n};\n\nconst monthValues = {\n  narrow: [\"Я\", \"Ф\", \"М\", \"А\", \"М\", \"И\", \"И\", \"А\", \"С\", \"О\", \"Н\", \"Д\"],\n  abbreviated: [\n    \"янв.\",\n    \"фев.\",\n    \"март\",\n    \"апр.\",\n    \"май\",\n    \"июнь\",\n    \"июль\",\n    \"авг.\",\n    \"сент.\",\n    \"окт.\",\n    \"нояб.\",\n    \"дек.\",\n  ],\n\n  wide: [\n    \"январь\",\n    \"февраль\",\n    \"март\",\n    \"апрель\",\n    \"май\",\n    \"июнь\",\n    \"июль\",\n    \"август\",\n    \"сентябрь\",\n    \"октябрь\",\n    \"ноябрь\",\n    \"декабрь\",\n  ],\n};\n\nconst formattingMonthValues = {\n  narrow: [\"Я\", \"Ф\", \"М\", \"А\", \"М\", \"И\", \"И\", \"А\", \"С\", \"О\", \"Н\", \"Д\"],\n  abbreviated: [\n    \"янв.\",\n    \"фев.\",\n    \"мар.\",\n    \"апр.\",\n    \"мая\",\n    \"июн.\",\n    \"июл.\",\n    \"авг.\",\n    \"сент.\",\n    \"окт.\",\n    \"нояб.\",\n    \"дек.\",\n  ],\n\n  wide: [\n    \"января\",\n    \"февраля\",\n    \"марта\",\n    \"апреля\",\n    \"мая\",\n    \"июня\",\n    \"июля\",\n    \"августа\",\n    \"сентября\",\n    \"октября\",\n    \"ноября\",\n    \"декабря\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"В\", \"П\", \"В\", \"С\", \"Ч\", \"П\", \"С\"],\n  short: [\"вс\", \"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\"],\n  abbreviated: [\"вск\", \"пнд\", \"втр\", \"срд\", \"чтв\", \"птн\", \"суб\"],\n  wide: [\n    \"воскресенье\",\n    \"понедельник\",\n    \"вторник\",\n    \"среда\",\n    \"четверг\",\n    \"пятница\",\n    \"суббота\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полн.\",\n    noon: \"полд.\",\n    morning: \"утро\",\n    afternoon: \"день\",\n    evening: \"веч.\",\n    night: \"ночь\",\n  },\n  abbreviated: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полн.\",\n    noon: \"полд.\",\n    morning: \"утро\",\n    afternoon: \"день\",\n    evening: \"веч.\",\n    night: \"ночь\",\n  },\n  wide: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полночь\",\n    noon: \"полдень\",\n    morning: \"утро\",\n    afternoon: \"день\",\n    evening: \"вечер\",\n    night: \"ночь\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полн.\",\n    noon: \"полд.\",\n    morning: \"утра\",\n    afternoon: \"дня\",\n    evening: \"веч.\",\n    night: \"ночи\",\n  },\n  abbreviated: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полн.\",\n    noon: \"полд.\",\n    morning: \"утра\",\n    afternoon: \"дня\",\n    evening: \"веч.\",\n    night: \"ночи\",\n  },\n  wide: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"полночь\",\n    noon: \"полдень\",\n    morning: \"утра\",\n    afternoon: \"дня\",\n    evening: \"вечера\",\n    night: \"ночи\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, options) => {\n  const number = Number(dirtyNumber);\n  const unit = options?.unit;\n\n  let suffix;\n  if (unit === \"date\") {\n    suffix = \"-е\";\n  } else if (unit === \"week\" || unit === \"minute\" || unit === \"second\") {\n    suffix = \"-я\";\n  } else {\n    suffix = \"-й\";\n  }\n\n  return number + suffix;\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingMonthValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"any\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(-?(е|я|й|ое|ье|ая|ья|ый|ой|ий|ый))?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^((до )?н\\.?\\s?э\\.?)/i,\n  abbreviated: /^((до )?н\\.?\\s?э\\.?)/i,\n  wide: /^(до нашей эры|нашей эры|наша эра)/i,\n};\nconst parseEraPatterns = {\n  any: [/^д/i, /^н/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^[1234](-?[ыои]?й?)? кв.?/i,\n  wide: /^[1234](-?[ыои]?й?)? квартал/i,\n};\n\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[яфмаисонд]/i,\n  abbreviated:\n    /^(янв|фев|март?|апр|ма[йя]|июн[ья]?|июл[ья]?|авг|сент?|окт|нояб?|дек)\\.?/i,\n  wide: /^(январ[ья]|феврал[ья]|марта?|апрел[ья]|ма[йя]|июн[ья]|июл[ья]|августа?|сентябр[ья]|октябр[ья]|октябр[ья]|ноябр[ья]|декабр[ья])/i,\n};\n\nconst parseMonthPatterns = {\n  narrow: [\n    /^я/i,\n    /^ф/i,\n    /^м/i,\n    /^а/i,\n    /^м/i,\n    /^и/i,\n    /^и/i,\n    /^а/i,\n    /^с/i,\n    /^о/i,\n    /^н/i,\n    /^я/i,\n  ],\n\n  any: [\n    /^я/i,\n    /^ф/i,\n    /^мар/i,\n    /^ап/i,\n    /^ма[йя]/i,\n    /^июн/i,\n    /^июл/i,\n    /^ав/i,\n    /^с/i,\n    /^о/i,\n    /^н/i,\n    /^д/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[впсч]/i,\n  short: /^(вс|во|пн|по|вт|ср|чт|че|пт|пя|сб|су)\\.?/i,\n  abbreviated: /^(вск|вос|пнд|пон|втр|вто|срд|сре|чтв|чет|птн|пят|суб).?/i,\n  wide: /^(воскресень[ея]|понедельника?|вторника?|сред[аы]|четверга?|пятниц[аы]|суббот[аы])/i,\n};\n\nconst parseDayPatterns = {\n  narrow: [/^в/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],\n  any: [/^в[ос]/i, /^п[он]/i, /^в/i, /^ср/i, /^ч/i, /^п[ят]/i, /^с[уб]/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^([дп]п|полн\\.?|полд\\.?|утр[оа]|день|дня|веч\\.?|ноч[ьи])/i,\n  abbreviated: /^([дп]п|полн\\.?|полд\\.?|утр[оа]|день|дня|веч\\.?|ноч[ьи])/i,\n  wide: /^([дп]п|полночь|полдень|утр[оа]|день|дня|вечера?|ноч[ьи])/i,\n};\n\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^дп/i,\n    pm: /^пп/i,\n    midnight: /^полн/i,\n    noon: /^полд/i,\n    morning: /^у/i,\n    afternoon: /^д[ен]/i,\n    evening: /^в/i,\n    night: /^н/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { formatDistance } from \"./ru/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./ru/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./ru/_lib/formatRelative.mjs\";\nimport { localize } from \"./ru/_lib/localize.mjs\";\nimport { match } from \"./ru/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary Russian locale.\n * @language Russian\n * @iso-639-2 rus\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const ru = {\n  code: \"ru\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default ru;\n","import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n"],"names":["defaultOptions","getDefaultOptions","getTimezoneOffsetInMilliseconds","date","_date","toDate","utcDate","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","Math","pow","millisecondsInWeek","millisecondsInDay","millisecondsInMinute","minutesInYear","minutesInMonth","minutesInDay","startOfDay","setHours","differenceInCalendarDays","dateLeft","dateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","constructFrom","value","constructor","startOfYear","cleanDate","setFullYear","getDayOfYear","startOfISOWeek","startOfWeek","weekStartsOn","getISOWeekYear","year","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","getTime","startOfISOWeekYear","fourthOfJanuary","getISOWeek","diff","getWeekYear","options","_ref","_ref2","_ref3","_options$firstWeekCon","_options$locale","_defaultOptions$local","firstWeekContainsDate","locale","firstWeekOfNextYear","firstWeekOfThisYear","startOfWeekYear","firstWeek","getWeek","addLeadingZeros","number","targetLength","abs","toString","padStart","lightFormatters","y","token","signedYear","length","M","month","String","d","a","dayPeriodEnumValue","toUpperCase","h","H","m","s","S","numberOfDigits","milliseconds","trunc","dayPeriodEnum","formatters","G","localize","era","width","ordinalNumber","unit","Y","signedWeekYear","weekYear","R","u","Q","quarter","ceil","context","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","getDay","day","e","localDayOfWeek","c","i","isoDayOfWeek","dayPeriod","toLowerCase","b","hours","B","K","k","X","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","offset","delimiter","arguments","undefined","sign","absOffset","minutes","dateLongFormatter","pattern","formatLong","timeLongFormatter","time","longFormatters","p","P","dateTimeLongFormatter","matchResult","match","datePattern","timePattern","dateTimeFormat","dateTime","replace","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isDate","Object","prototype","call","isValid","isNaN","Number","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","format","formatStr","_ref4","_options$locale2","_ref5","_ref6","_ref7","_options$weekStartsOn","_options$locale3","_defaultOptions$local2","defaultLocale","originalDate","RangeError","parts","map","substring","firstCharacter","longFormatter","join","isToken","cleanEscapedString","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","test","isProtectedWeekYearToken","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","input","_message","subject","concat","message","console","warn","includes","warnOrThrowProtectedError","formatter","matched","compareAsc","_dateLeft","_dateRight","formatDistanceStrict","baseDate","_options$roundingMeth","comparison","localizeOptions","assign","addSuffix","roundingMethod","method","result","dstNormalizedMinutes","defaultUnit","seconds","formatDistance","roundedMinutes","days","months","years","buildFormatLongFn","args","defaultWidth","formats","buildLocalizeFn","valuesArray","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","array","predicate","findIndex","object","hasOwnProperty","findKey","valueCallback","rest","slice","buildMatchPatternFn","parseResult","parsePattern","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","full","long","medium","short","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","dirtyNumber","_options","rem100","narrow","abbreviated","wide","am","pm","midnight","noon","morning","afternoon","evening","night","enUS","code","count","tokenValue","formatRelative","_baseDate","parseInt","any","index","declension","scheme","rem10","singularNominative","singularGenitive","pluralGenitive","buildLocalizeTokenFn","future","regular","past","_count","isSameWeek","accusativeWeekdays","thisWeek","weekday","suffix","ru","setDate","argument","argStr","NaN"],"sourceRoot":""}